{"version":3,"sources":["components/Button.js","components/Header.js","components/Footer.js","components/About.js","utils/connect.js","components/CryptoBox.js","components/ThreeBox.js","App.js","reportWebVitals.js","index.js"],"names":["Button","color","text","setShow","onClick","style","backgroundColor","className","Header","showAdd","addEnabled","location","useLocation","pathname","Footer","to","About","Web3","require","web3","givenProvider","connectWallet","a","window","ethereum","request","method","addressArray","obj","status","address","message","target","href","rel","getCurrentWalletConnected","length","getCurrentChain","chainId","parseInt","chainStatus","CryptoBox","useState","walletAddress","setWallet","setStatus","balance","setBalance","useEffect","addWalletListener","addChainListener","fetchData","console","log","eth","getBalance","err","wei","utils","fromWei","substring","Balance","connectWalletPressed","walletResponse","on","accounts","id","String","ThreeBox","ref","useRef","hovered","hover","clicked","click","speed","setSpeed","useFrame","state","delta","current","rotation","z","x","y","scale","event","onDoubleClick","onPointerOver","onPointerOut","args","App","setShowAdd","title","description","done","path","element","display","justifyContent","width","position","OrbitControls","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.945eda31.chunk.js","sourcesContent":["const Button = ({ color, text, setShow }) => {\n    return (\n        <button \n            onClick={setShow}\n            style={{backgroundColor: color}} \n            className='btn'\n        >\n            {text}\n        </button>\n    )\n}\n\nexport default Button","import Button from './Button'\n\nimport { useLocation } from 'react-router-dom'\n\nconst Header = ({ showAdd, setShow, addEnabled }) => {\n\n    const location = useLocation()\n\n    return (\n        <header className='header'>\n            <h1> NFT Dapp </h1>\n            {/* <Button color='green' text='New' onClick={onClick}/> */}\n            {(location.pathname === '/' && addEnabled) && <Button text={showAdd ? 'Close' : 'Add'} color={showAdd ? 'red' : 'steelBlue'} setShow={setShow}/>}\n        </header>\n    )\n}\n\n// CSS in JS\n// const headingStyle = {\n//     color: 'red',\n//     backgroundColor: 'black',\n// }\n\nexport default Header\n","import { Link } from 'react-router-dom';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <p>Copyright &copy; 2021</p>\n            <Link to=\"/about\">About</Link>\n        </footer>\n    )\n}\n\nexport default Footer\n","import { Link } from 'react-router-dom'\n\nconst About = () => {\n    return (\n        <div>\n            <h4>Version 1.0.0</h4>\n            <Link to=\"/\">Go back</Link>\n        </div>\n    )\n}\n\nexport default About\n","const Web3 = require(\"web3\");\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nexport const Balance = (walletAddress, setBalance) => {\n    console.log(walletAddress);\n\n    if (walletAddress.length > 0) {\n        web3.eth.getBalance(walletAddress, (err, wei) => {\n            if (err) {\n                console.log(err);\n            } else {\n                setBalance(web3.utils.fromWei(wei, \"ether\").substring(0, 6));\n            }\n        });\n    } else {\n        setBalance(\"0\");\n    }\n};\n\nexport const connectWallet = async () => {\n    if (window.ethereum) {\n        try {\n            const addressArray = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n            const obj = {\n                status: \"Click the above box to mint your NFT!\",\n                address: addressArray[0],\n            };\n            return obj;\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"😥 \" + err.message,\n            };\n        }\n    } else {\n        return {\n            address: \"\",\n            status: (\n                <span>\n                    <p>\n                        {\" \"}\n                        🦊{\" \"}\n                        <a\n                            target=\"_blank\"\n                            href={`https://metamask.io/download.html`}\n                            rel=\"noreferrer\"\n                        >\n                            You must install Metamask, a virtual Ethereum\n                            wallet, in your browser.\n                        </a>\n                    </p>\n                </span>\n            ),\n        };\n    }\n};\n\nexport const getCurrentWalletConnected = async () => {\n    if (window.ethereum) {\n        try {\n            const addressArray = await window.ethereum.request({\n                method: \"eth_accounts\",\n            });\n            if (addressArray.length > 0) {\n                return {\n                    address: addressArray[0],\n                    status: \"Click the above box to mint your NFT!\",\n                };\n            } else {\n                return {\n                    address: \"\",\n                    status: \"🦊 Connect to Metamask using the button below.\",\n                };\n            }\n        } catch (err) {\n            return {\n                address: \"\",\n                status: \"😥 \" + err.message,\n            };\n        }\n    } else {\n        return {\n            address: \"\",\n            status: (\n                <span>\n                    <p>\n                        {\" \"}\n                        🦊{\" \"}\n                        <a\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                            href={`https://metamask.io/download.html`}\n                        >\n                            You must install Metamask, a virtual Ethereum\n                            wallet, in your browser.\n                        </a>\n                    </p>\n                </span>\n            ),\n        };\n    }\n};\n\nexport const getCurrentChain = async () => {\n    if (window.ethereum) {\n        try {\n            const chainId = await window.ethereum.request({\n                method: \"eth_chainId\",\n            });\n\n            if (parseInt(chainId, 16) === 1) {\n                return {\n                  chainStatus: \"Click the above box to mint your NFT!\"\n                };\n            } else {\n                return {\n                    chainStatus: \"🦊 Connect to the main Ethereum network\",\n                };\n            }\n        } catch (err) {\n            return {\n                status: \"😥 \" + err.message,\n            };\n        }\n    }\n};\n","import { useState, useEffect } from \"react\";\nimport {\n    connectWallet,\n    getCurrentWalletConnected,\n    getCurrentChain,\n    Balance,\n} from \"../utils/connect\";\n\nconst CryptoBox = () => {\n    const [walletAddress, setWallet] = useState(\"\");\n    const [status, setStatus] = useState(\"\");\n    const [balance, setBalance] = useState(0);\n\n    useEffect(() => {\n        async function fetchData() {\n            const { address, status } = await getCurrentWalletConnected();\n            setWallet(address);\n            setStatus(status);\n\n            addWalletListener();\n\n            const { chainStatus } = await getCurrentChain();\n            setStatus(chainStatus);\n\n            addChainListener();\n        }\n        fetchData();\n    }, [walletAddress]);\n\n    useEffect(() => {\n        Balance(walletAddress, setBalance);\n    }, [walletAddress, status]);\n\n    const connectWalletPressed = async () => {\n        const walletResponse = await connectWallet();\n        setStatus(walletResponse.status);\n        setWallet(walletResponse.address);\n    };\n\n    function addWalletListener() {\n        if (window.ethereum) {\n            window.ethereum.on(\"accountsChanged\", (accounts) => {\n                if (accounts.length > 0) {\n                    setWallet(accounts[0]);\n                    setStatus(\"Click the above box to mint your NFT!\");\n                } else {\n                    setWallet(\"\");\n                    setStatus(\"🦊 Connect to Metamask using button below.\");\n                }\n            });\n        } else {\n            setStatus(\n                <p>\n                    {\" \"}\n                    🦊{\" \"}\n                    <a\n                        target=\"_blank\"\n                        rel=\"noreferrer\"\n                        href={`https://metamask.io/download.html`}\n                    >\n                        You must install Metamask, a virtual Ethereum wallet, in\n                        your browser.\n                    </a>\n                </p>\n            );\n        }\n    }\n\n    function addChainListener() {\n        if (window.ethereum) {\n            window.ethereum.on(\"chainChanged\", (chainId) => {\n                if (parseInt(chainId, 16) !== 1) {\n                    setStatus(\"🦊 Connect to the main Ethereum network.\");\n                } else {\n                    setStatus(\"Click the above box to mint your NFT!\");\n                }\n            });\n        }\n    }\n\n    return (\n        <div className=\"crypto-box\">\n            <p id=\"status\">{status}</p>\n\n            <p className=\"balance\">\n                <strong>Balance: Ξ</strong>\n                {balance}\n            </p>\n\n            <button onClick={connectWalletPressed} className=\"btn btn-connect\">\n                {walletAddress.length > 0 ? (\n                    \"Connected: \" +\n                    String(walletAddress).substring(0, 6) +\n                    \"...\" +\n                    String(walletAddress).substring(38)\n                ) : (\n                    <span>Connect Wallet</span>\n                )}\n            </button>\n        </div>\n    );\n};\n\nexport default CryptoBox;\n","import { useRef, useState } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\n\nconst ThreeBox = () => {\n    const ref = useRef();\n\n    const [hovered, hover] = useState(false);\n    const [clicked, click] = useState(false);\n\n    const [speed, setSpeed] = useState(1);\n\n    useFrame((state, delta) => {\n        ref.current.rotation.z += 0.01 * speed;\n        ref.current.rotation.x += 0.001 * speed;\n        ref.current.rotation.y += 0.003 * speed;\n    });\n\n    const doubleClicked = () => (console.log(\"doubleClicked\"));\n\n    return (\n        <mesh\n            // {...props}\n            ref={ref}\n            scale={clicked ? 1.1 : 1}\n            // onClick={(event) => click(!clicked)}\n            onClick={(event) => {\n                setSpeed(5 / speed);\n                click(!clicked);\n            }}\n            onDoubleClick={(event) => doubleClicked()}\n            onPointerOver={(event) => hover(true)}\n            onPointerOut={(event) => hover(false)}\n        >\n            <boxGeometry args={[3, 3, 3]} />\n            <meshStandardMaterial color={hovered ? (clicked ? \"lightpink\" : \"hotpink\") : (clicked ? \"steelBlue\" : \"orange\")} />\n        </mesh>\n    );\n};\n\nexport default ThreeBox;\n","import { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Tasks from \"./components/Tasks\";\nimport AddTask from \"./components/AddTask\";\n\nimport { HashRouter as Router, Routes, Route } from \"react-router-dom\";\nimport About from \"./components/About\";\n\nimport CryptoBox from \"./components/CryptoBox\";\n\nimport ThreeBox from \"./components/ThreeBox\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\"\n\nconst App = () => {\n    const [showAdd, setShowAdd] = useState(false);\n    const [tasks, setTasks] = useState([\n        {\n            id: 1,\n            title: \"Task 1\",\n            description: \"Description 1\",\n            done: false,\n        },\n        {\n            id: 2,\n            title: \"Task 2\",\n            description: \"Description 2\",\n            done: true,\n        },\n        {\n            id: 3,\n            title: \"Task 3\",\n            description: \"Description 3\",\n            done: false,\n        },\n    ]);\n\n    const addTask = (task) => {\n        const id = tasks[tasks.length - 1].id + 1;\n        setTasks([...tasks, { ...task, id }]);\n    };\n\n    const deleteTask = (id) => {\n        setTasks(tasks.filter((task) => task.id !== id));\n    };\n\n    // create a function that toggles the done property of a task\n    const toggleTask = (id) => {\n        setTasks(\n            tasks.map((task) =>\n                task.id === id ? { ...task, done: !task.done } : task\n            )\n        );\n    };\n\n    const showTasks = false;\n\n    return (\n      <Router>\n        <div className=\"container\">\n            <Header \n            showAdd={showAdd}\n            setShow={() => setShowAdd(!showAdd)}\n            addEnabled={showTasks}\n            />\n\n        <Routes>\n\n            <Route path=\"/\"\n            element=\n              {showTasks  &&             <>\n            {showAdd && <AddTask onAdd={addTask} />}\n\n            {tasks.length > 0 ? (\n                <Tasks\n                    tasks={tasks}\n                    onDelete={deleteTask}\n                    onToggle={toggleTask}\n                />\n            ) : (\n                <h1>No tasks</h1>\n            )}\n\n            </> } \n            />\n\n            <Route path='/about' element={<About />} />\n\n        </Routes>\n\n            <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\", \n            }}\n            >\n            <Canvas\n            style={{\n              width: \"90%\",\n            }}\n            >\n              <ambientLight />\n              <pointLight position={[5, 8, 0]} />\n              <ThreeBox position={[-1.2, 0, 0]}/>\n              <OrbitControls/>\n            </Canvas>\n\n            </div>\n\n            <CryptoBox />\n\n            <Footer />\n        </div>\n      </Router>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}